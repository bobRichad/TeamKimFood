plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.tkf'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	//MultipartFile 사용위해 추가
	implementation 'commons-fileupload:commons-fileupload:1.5'
	implementation 'org.apache.commons:commons-io:1.3.2'

	//test 롬복 사용
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// Querydsl 추가
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    //jwt라이브러리
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'

    //oauth2 의존성 설정
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    //springSecurity 관련 설정
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

}

tasks.named('test') {
	useJUnitPlatform()
}

//def webappDir = "$projectDir/src/main/frontend"
//
//sourceSets {
//	main {
//		resources {
//			srcDirs = ["$webappDir/build", "$projectDir/src/main/resources"]
//		}
//	}
//}
//
//processResources {
//	dependsOn "buildReact"
//}
//
//sourceSets {
//	main {
//		resources { srcDirs = ["$projectDir/src/main/resources"]
//		}
//	}
//}
//
//task buildReact(type: Exec) {
//	dependsOn "installReact"
//	workingDir "$webappDir"
//	inputs.dir "$webappDir"
//	group = BasePlugin.BUILD_GROUP
//	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
//		commandLine "yarn.cmd", "run-script", "build"
//		commandLine "yarn.cmd", "build"
//	} else {
//		commandLine "npm", "run-script", "build"
//	}
//}
//
//task installReact(type: Exec) {
//	workingDir "$webappDir"
//	inputs.dir "$webappDir"
//	group = BasePlugin.BUILD_GROUP
//	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
//		commandLine "yarn.cmd", "audit", "fix"
//		commandLine 'yarn.cmd', 'install'
//	} else {
//		commandLine "npm", "audit", "fix"
//		commandLine 'npm', 'install'
//	}

def frontendDir = "$projectDir/src/main/frontend"

sourceSets {
	main {
		resources { srcDirs = ["$projectDir/src/main/resources"]
		}
	}
}

processResources { dependsOn "copyReactBuildFiles" }

task installReact(type: Exec) {
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "yarn.cmd", "audit", "fix"
		commandLine 'yarn.cmd', 'install'
//		commandLine "npm.cmd", "audit", "fix"
//		commandLine 'npm.cmd', 'install'
	} else {
		commandLine "npm", "audit", "fix" commandLine 'npm', 'install'
	}
}

task buildReact(type: Exec) {
	dependsOn "installReact"
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "yarn.cmd", "run-script", "build"
		commandLine "yarn.cmd", "build"
//		commandLine "npm.cmd", "run-script", "build"
	} else {
		commandLine "npm", "run-script", "build"
	}
}

task copyReactBuildFiles(type: Copy) {
	dependsOn "buildReact"
	from "$frontendDir/build"
	into "$projectDir/src/main/resources/static"
}